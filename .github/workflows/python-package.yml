name: Build Python package

on:
  push:

jobs:

  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.9", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install poetry flake8 pytest
        poetry install --with=dev
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Build package
      run: |
        poetry build

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install poetry
    - name: Set version number
      run: |
        PKG_VERSION=$(poetry version --short)
        SHA=$(echo $GITHUB_SHA | cut -c1-7)
        POETRY_VERSION=${PKG_VERSION}+dev${SHA}
        echo "Setting version to ${POETRY_VERSION}"
        echo "POETRY_VERSION=${POETRY_VERSION}" >> $GITHUB_ENV
        PKG_NAME=$(poetry version | tr ' ' '-')-${SHA}
        echo "Setting package name to ${PKG_NAME}"
        echo "PKG_NAME=${PKG_NAME}" >> $GITHUB_ENV
    - name: Build package
      if: success()
      run: |
        echo "POETRY_VERSION=${POETRY_VERSION}"
        poetry version $POETRY_VERSION
        poetry build
    - name: Upload package
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PKG_NAME }}
        path: dist/*
    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1.8
      with:
        repository-url: https://test.pypi.org/legacy/


